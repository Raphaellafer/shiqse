const express = require('express');
const bcrypt = require('bcryptjs');
const Usuario = require('../models/usuario');

const router = express.Router();

// P치gina de login
router.get('/login', (req, res) => {
  res.render('login'); // Criar a view login.ejs
});

// Processar login
router.post('/login', async (req, res) => {
  try {
    const { email, senha } = req.body;
    const usuario = await Usuario.findOne({ email });

    if (!usuario || !(await bcrypt.compare(senha, usuario.senha))) {
      return res.status(400).send('Credenciais inv치lidas.');
    }

    req.session.usuario = usuario; // Armazena o usu치rio na sess칚o
    res.redirect('/'); // Redireciona para o formul치rio ap칩s login

  } catch (error) {
    console.error('Erro no login:', error);
    res.status(500).send('Erro ao fazer login.');
  }
});

// Processar logout
router.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login');
});

// P치gina de cadastro (apenas para novos usu치rios)
router.get('/register', (req, res) => {
  res.render('register'); // Criar a view register.ejs
});

// Processar cadastro
router.post('/register', async (req, res) => {
    try {

    console.log("游댌 Dados recebidos no backend:", req.body); // Depura칞칚o
  

    const { nome, email, senha } = req.body;

    // Verifica se o usu치rio j치 existe
    if (await Usuario.findOne({ email })) {
      return res.status(400).send('E-mail j치 cadastrado.');
    }

    const novoUsuario = new Usuario({ nome, email, senha });
    await novoUsuario.save();

    res.redirect('/login'); // Redireciona para login ap칩s cadastro
  } catch (error) {
    console.error('Erro no cadastro:', error);
    res.status(500).send('Erro ao cadastrar usu치rio.');
  }
});

module.exports = router;
